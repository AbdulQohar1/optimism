ALTER TABLE funding 
ADD CONSTRAINT fk_funding_projects 
FOREIGN KEY (project_id) 
REFERENCES projects(id);

ALTER TABLE project_contribution 
ADD CONSTRAINT fk_project_contribution_projects 
FOREIGN KEY (project_id) 
REFERENCES projects(id);

ALTER TABLE project_impact 
ADD CONSTRAINT fk_project_impact_projects 
FOREIGN KEY (project_id) 
REFERENCES projects(id);

--project schema 
CREATE TABLE projects (
  id SERIAL PRIMARY KEY,
  project_id VARCHAR(255) UNIQUE NOT NULL,
  name VARCHAR(255),
  description TEXT,
  created_by VARCHAR(255) NOT NULL,
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  total_fund INTEGER DEFAULT 0,
  status VARCHAR(50),
  project_logo_image BYTEA, 
  project_logo_name  VARCHAR(120),
  project_banner_image BYTEA,  
  website_url VARCHAR(255)  
);

--project funding schema
CREATE TABLE funding (
  id SERIAL PRIMARY KEY,
  project_id INTE1GER NOT NULL REFERENCES project(id),
  amount INTEGER NOT NULL,
  funding_source VARCHAR(255),
  funding_description VARCHAR(250),
  currency VARCHAR(50),
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- project_contribution schema 
CREATE TABLE project_contribution (
  id SERIAL PRIMARY KEY,
  project_id INTEGER NOT NULL REFERENCES project(id),
  contribution TEXT NOT NULL,
  dependecy_website_url VARCHAR(255),
  dependency_description VARCHAR(120));

-- project project_impact schema
CREATE TABLE project_impact (
  id SERIAL PRIMARY KEY,
  project_id INTEGER NOT NULL REFERENCES project(id),
  description TEXT);

-- project comment schema
CREATE TABLE comments (
  project_id INTEGER NOT NULL REFERENCES projects(id),
  user_id VARCHAR(250) NOT NULL,
  comment_text TEXT NOT NULL,
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

async update(id: number, updateFundingDto: UpdateFundingDto): Promise<funding> {
  const existingFunding = await this.findOne(id);

  // Throw an exception error if funding with the provided id isn't found
  if (!existingFunding) {
    throw new NotFoundException(`Fund with the provided id ${id} not found...`);
  }

  // Exclude the id property from updateFundingDto
  const updatedData = {
    ...updateFundingDto,
    id: undefined, // Exclude the id property
  };

  // Update the funding if found
  const updateFunding = await this.prisma.funding.update({
    where: { id: id },
    data: updatedData,
  });

  // return `This action updates a #${id} funding`;
  return updateFunding;
}